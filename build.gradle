plugins {
  id "java-library"
  id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
  id 'de.undercouch.download' version '5.4.0'
  id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

description = """
This project provides an abstraction around retrying failed operations, with an \
emphasis on declarative control of the process and policy-based behaviour that is \
easy to extend and customize. For instance, you can configure a plain POJO \
operation to retry if it fails, based on the type of exception, and with a fixed \
or exponential backoff.
"""

group = "cn.taketoday"


apply plugin: 'jacoco'
apply plugin: "java-test-fixtures"
apply plugin: 'infra.application'

ext.javadocLinks = [
    "https://docs.oracle.com/en/java/javase/17/docs/api/",
    "https://jakarta.ee/specifications/platform/9/apidocs/",
    "https://docs.jboss.org/hibernate/orm/5.6/javadocs/",

] as String[]

ext {
  isSnapshot = version.endsWith('SNAPSHOT')
  isReleaseVersion = !isSnapshot
}

apply from: "$rootDir/gradle/infra-module.gradle"

repositories {
  mavenLocal()
  mavenCentral()

  if (version.endsWith('-SNAPSHOT')) {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

dependencies {
  api 'cn.taketoday:today-core'
  api 'cn.taketoday:today-context'

  testImplementation 'org.aspectj:aspectjrt'
  testImplementation 'org.aspectj:aspectjtools'
  testImplementation 'org.aspectj:aspectjweaver'

  testImplementation 'cn.taketoday:today-test'
  testImplementation 'cn.taketoday:today-tx'

  testImplementation("org.junit.jupiter:junit-jupiter-api")
  testImplementation("org.junit.jupiter:junit-jupiter-params")
  testImplementation("org.mockito:mockito-core")
  testImplementation("org.mockito:mockito-junit-jupiter")
  testImplementation("org.assertj:assertj-core")
  testImplementation 'org.projectlombok:lombok'
  testAnnotationProcessor("org.projectlombok:lombok")

  // Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
  testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")
  // JSR-305 only used for non-required meta-annotations
  compileOnly("com.google.code.findbugs:jsr305")
  compileOnly("com.google.code.findbugs:findbugs")
  compileOnly('org.jboss.logging:jboss-logging:3.5.3.Final')
}

java {
  sourceCompatibility = 17
  targetCompatibility = 17
}

test {
  useJUnitPlatform()
}

jacocoTestReport {
  reports {
    xml.required = true
    csv.required = false
    html.required = false
  }
}

infraJar {
  enabled = false
}

check {
  dependsOn jacocoTestReport
}

if (isReleaseVersion) {
  nexusPublishing {
    repositories {
      sonatype {
        username = repoUsername
        password = repoPassword
      }
    }
  }
}
